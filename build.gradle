plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.22"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	// Spring-boot-devtools for live reload 
	implementation 'org.springframework.boot:spring-boot-devtools:3.3.2'
	// Spring-boot-data-jpa-with-hibernet
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.2'
	// postgresql
	implementation 'org.postgresql:postgresql:42.5.0'
}

// tasks.named('test') {
// 	useJUnitPlatform()
// }
bootRun {
    // Use Spring Boot DevTool only when we run Gradle bootRun task
    classpath = sourceSets.main.runtimeClasspath + configurations.developmentOnly
	sourceResources sourceSets.main
    if (project.hasProperty('profiles')) {
		environment SPRING_PROFILES_ACTIVE: profiles
	} else {
		def profiles = 'local'
		environment SPRING_PROFILES_ACTIVE: profiles
	}
}

tasks.register('hello') {
    doLast {
        println 'Hello world!'
    }
}